{"version":3,"file":"static/js/Ligin.cec25117.chunk.js","mappings":"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","sources":["webpack://solstice-health-test/./src/style/Logo.module.scss?451a","components/Hero/Hero.js","components/LogIn/LogIn.js","views/Login.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","webpack://solstice-health-test/./src/style/ContainerMain.module.scss?6408","webpack://solstice-health-test/./src/style/Form.module.scss?8a09","../node_modules/@babel/runtime/helpers/esm/defineProperty.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"logo\":\"Logo_logo__yjOBa\"};","import React from \"react\";\r\nimport logo from '../../images/logo.png'\r\nimport s from \"../../style/Logo.module.scss\";\r\n\r\nconst Hero = () => (\r\n    <img src={logo} alt=\"logo\" className={s.logo}/>\r\n)\r\n\r\nexport default Hero ;","import React, { Component } from \"react\";\r\n// import { useDispatch } from 'react-redux';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport shortid from \"shortid\";\r\nimport { AiOutlineEye, AiOutlineEyeInvisible } from \"react-icons/ai\";\r\n// import authOperations from '../../redux/auth/auth-operations';\r\nimport classNames from 'classnames';\r\nimport s from '../../style/Form.module.scss'\r\n\r\nclass LogIn extends Component {\r\n    state = {\r\n        email: \"\",\r\n        password: \"\",\r\n        check: false,\r\n        seePassword: false,\r\n        btnSubmit: false,\r\n    };\r\n\r\n    emailInputId = shortid.generate();      \r\n    passwordInputId = shortid.generate();\r\n    \r\n    handleChange = (e) => {\r\n        const { name, value } = e.currentTarget;\r\n        const { email, password } = this.state;\r\n\r\n        this.setState({ [name]: value });\r\n\r\n        if ((email !== '') && (password !== '')) {\r\n            this.setState({ btnSubmit: true });\r\n        } else {\r\n            this.setState({ btnSubmit: false });\r\n        }\r\n    };\r\n\r\n    toggleSwitch = () => {\r\n        this.setState(({check}) => ({\r\n            check: !check,\r\n        }));\r\n    }\r\n    seeThePassword = () => {\r\n        this.setState(({seePassword}) => ({\r\n            seePassword: !seePassword,\r\n        }));\r\n    }\r\n\r\n    handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        const { email, password, check} = this.state;\r\n\r\n        // this.dispatch(authOperations.register({ email, password, check }));\r\n        console.log({email, password, check})\r\n\r\n        this.reset();\r\n        this.setState({ btnSubmit: false });\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ email: \"\", password: \"\"});\r\n    };\r\n\r\n    render() {\r\n        const { email, password, check, seePassword, btnSubmit} = this.state;\r\n\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className={s.container}>\r\n                <h1 className={s.tytle}>Welcome</h1>\r\n                <p className={s.text}>Enter your email and password to log in</p>\r\n\r\n\r\n                <div className={s.containerInput}>\r\n                <label htmlFor={this.emailInputId}  className={s.label}>Email address</label>\r\n                    <input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                        value={email}\r\n                        placeholder=\"Email address\"\r\n                        id={this.emailInputId}\r\n                        className={s.input}\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className={classNames(s.containerInput, s.inputPassword)}>\r\n                <label htmlFor={this.passwordInputId} className={s.label}>Password</label>\r\n                    <input\r\n                        type={!seePassword ? \"password\" : \"text\"}\r\n                        name=\"password\"\r\n                        value={password}\r\n                        placeholder=\"Password\"\r\n                        id={this.passwordInputId}\r\n                        className={s.input}\r\n                        minLength=\"6\"\r\n                        maxLength=\"15\"\r\n                        size=\"15\"\r\n                        required\r\n                        autoComplete=\"current-password\"\r\n                        onChange={this.handleChange}\r\n                    />\r\n                  <button type=\"button\" className={s.btnHiddenPassword} onClick={this.seeThePassword}>\r\n                        {!seePassword\r\n                            ? <AiOutlineEye className={s.iconPassword}/>\r\n                            : <AiOutlineEyeInvisible className={s.iconPassword} />}\r\n                    </button>\r\n                </div>\r\n\r\n                    \r\n                <div className={s.switchContaine}>\r\n                    <div className={s.switch} onClick={() => this.toggleSwitch()}>\r\n                        <p className={s.textSwitch}>Remember me</p>\r\n                        <div className={s.switchContainer} > \r\n                            <div className={!check ? s.switchBackground : s.switchBackgroundCheck}></div> \r\n                            <div className={!check ? s.switchHandle : s.switchHandleCheck}></div>  \r\n                        </div> \r\n                    </div> \r\n\r\n                        <NavLink to=\"/reset-password\" className={s.link}>Reset password</NavLink>\r\n                    </div>\r\n\r\n                <button\r\n                    type=\"submit\" \r\n                    className={!btnSubmit ? s.button : classNames(s.button, s.buttonActive)}\r\n                    disabled={!btnSubmit} \r\n                >\r\n                   Log in\r\n                </button>\r\n                \r\n                <div className={s.textGoto}>\r\n                  <p>Don’t have an account? <NavLink to=\"/sign-up\" className={classNames(s.link, s.linkGoto)}>Sign up</NavLink></p>\r\n                </div>\r\n\r\n            </form>\r\n    )}  \r\n}\r\n\r\nexport default LogIn;","import Hero from '../components/Hero'\r\nimport LogIn from '../components/LogIn'\r\nimport s from '../style/ContainerMain.module.scss'\r\n\r\nconst Login = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <LogIn/>\r\n            <Hero />\r\n        </div>\r\n    )\r\n};\r\nexport default Login;","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContainerMain_container__gaXKB\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Form_container__zN4he\",\"tytle\":\"Form_tytle__JVlm2\",\"text\":\"Form_text__JaQ6R\",\"containerInput\":\"Form_containerInput__4oEbJ\",\"label\":\"Form_label__PSbOG\",\"input\":\"Form_input__noDaY\",\"ivalidInput\":\"Form_ivalidInput__MZjlz\",\"inputPassword\":\"Form_inputPassword__M766n\",\"btnHiddenPassword\":\"Form_btnHiddenPassword__VxQ2I\",\"iconPassword\":\"Form_iconPassword__GqfbG\",\"switchContaine\":\"Form_switchContaine__zIzGJ\",\"switch\":\"Form_switch__UOcmO\",\"textSwitch\":\"Form_textSwitch__nyUpu\",\"switchContainer\":\"Form_switchContainer__jn7Os\",\"switchBackground\":\"Form_switchBackground__Io-5M\",\"switchHandle\":\"Form_switchHandle__O+HVH\",\"switchBackgroundCheck\":\"Form_switchBackgroundCheck__9PuGQ\",\"switchHandleCheck\":\"Form_switchHandleCheck__cE0Fc\",\"button\":\"Form_button__X5PSw\",\"buttonActive\":\"Form_buttonActive__-CcV3\",\"link\":\"Form_link__a3wlW\",\"textGoto\":\"Form_textGoto__yRFuo\",\"linkGoto\":\"Form_linkGoto__OHNkZ\",\"containerTytle\":\"Form_containerTytle__FwtOg\",\"tytleReset\":\"Form_tytleReset__YKRr5\",\"iconReset\":\"Form_iconReset__W7bHg\",\"linkReset\":\"Form_linkReset__2Augd\"};","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}"],"names":["src","alt","className","s","LogIn","state","email","password","check","seePassword","btnSubmit","emailInputId","shortid","passwordInputId","handleChange","e","currentTarget","name","value","setState","toggleSwitch","seeThePassword","handleSubmit","evt","preventDefault","console","log","reset","this","onSubmit","htmlFor","type","placeholder","id","required","autoComplete","onChange","classNames","minLength","maxLength","size","onClick","to","disabled","Component","Hero","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","number","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","Uint8Array","bytes","i","_seed_","mask","LN2","step","_defineProperty","obj","key","Object","defineProperty","enumerable","configurable","writable"],"sourceRoot":""}